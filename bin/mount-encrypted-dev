#!/usr/bin/env bash

################################################################################
set -eu
set -o pipefail

################################################################################
usage() {
  cat <<EOF
Usage: $(basename "$0") [options] <device> <mount-point>
Mount encrypted device <device> at <mount-point>

Usage: $(basename "$0") -u <mount-point>
Unmount encrypted device at <mount-point>

Options:
  -k FILE  Read key from FILE
  -p NAME  Read a password via 'pass show NAME'
  -u       Unmount instead of mount
  -r       Mount read-only
  -G GID   Mount with group ID set to GID
  -U UID   Mount with user ID set to UID
EOF
}

################################################################################
options_for_mount=()
option_unmount=0
option_key_file=
option_pass_name=

################################################################################
option_device=
option_mount_point=

################################################################################
# shellcheck source=../lib/encryption-utils.sh
. "$(dirname "$0")/../lib/encryption-utils.sh"

################################################################################
do_mount() {
  local device=$1
  local point=$2
  local options=()

  local crypt_device
  crypt_device="$(make_crypt_device_name "$device")"

  if [ "${#options_for_mount[@]}" -gt 0 ]; then
    options+=("-o$(join_array_with ',' "${options_for_mount[@]}")")
  fi

  if [ ! -e "/dev/mapper/$crypt_device" ]; then
    cryptsetup_ open "$device" "$crypt_device"
  fi

  sudo_ mount "${options[@]}" "/dev/mapper/$crypt_device" "$point"
}

################################################################################
do_umount() {
  local point=$1
  local crypt_device

  crypt_device=$(
    df "$point" |
      tail -1 |
      cut -d' ' -f 1
  )

  sudo_ umount "$point"
  sudo_ cryptsetup close "$crypt_device"

  if basename "$crypt_device" | grep -Eq '^loop[0-9]+_'; then
    loopback="/dev/$(basename "$crypt_device" | sed -E -e 's/_.*$//')"
    sudo_ losetup --detach "$loopback"
  fi
}

################################################################################
parse_command_line() {
  while getopts "hk:G:U:ruk:p:" o; do
    case "${o}" in
    u)
      option_unmount=1
      ;;

    G)
      options_for_mount+=("gid=$OPTARG")
      ;;

    r)
      options_for_mount+=("ro")
      ;;

    U)
      options_for_mount+=("uid=$OPTARG")
      ;;

    h)
      usage
      exit
      ;;

    k)
      option_key_file=$OPTARG
      ;;

    p)
      option_pass_name=$OPTARG
      ;;

    *)
      exit 1
      ;;
    esac
  done

  shift $((OPTIND - 1))

  if [ "$option_unmount" -eq 0 ]; then
    if [ $# -ne 2 ]; then
      echo >&2 "ERROR: Mounting requires two arguments"
      exit 1
    fi
    option_device=$1
    option_mount_point=$2
  else
    if [ $# -ne 1 ]; then
      echo >&2 "ERROR: Unmounting requires a single mount point"
      exit 1
    fi
    option_mount_point=$1
  fi
}

################################################################################
main() {
  local loopback

  parse_command_line "$@"
  prepare_password

  if [ $option_unmount = 0 ]; then
    if [ ! -b "$option_device" ] && [ ! -r "$option_device" ]; then
      echo >&2 "ERROR: $option_device is not a valid device"
      exit 1
    fi

    if [ ! -d "$option_mount_point" ]; then
      echo >&2 "ERROR: $option_mount_point is not a valid directory"
      exit 1
    fi

    if [ ! -b "$option_device" ]; then
      loopback=$(sudo_ losetup --nooverlap --find --show "$option_device")
      do_mount "$loopback" "$option_mount_point"
    else
      do_mount "$option_device" "$option_mount_point"
    fi
  else
    do_umount "$option_mount_point"
  fi
}

################################################################################
main "$@"
