#!/usr/bin/env bash

################################################################################
set -eu
set -o pipefail

################################################################################
usage() {
  cat <<EOF
Usage: $(basename "$0") [options]

## INTRODUCTION ##

Decrypt and store all pass(1) entries in an encrypted disk image.

Very handy as a backup or when you need to share the passwords
unencrypted via an encrypted drive.

## WARNING ##

This script doesn't currently handle these situations:

  1. Not enough space left in the disk image.
  2. Deleted or renamed password entries

At some point I'll probably rewrite this in a real language.

## OPTIONS ##

  -E      Don't append a file extension to pass(1) entries
  -e EXT  Append EXT as a file extension to pass(1) files [$option_append_ext]
  -f FILE Use (or create) FILE as the encrypted disk image
  -k FILE File to read the password from
  -M      Leave the disk image mounted
  -m DIR  Mount the disk image at DIR
  -P N    Image size multiplier (needed-size * N) [$option_size_multiplier]
  -p NAME Read a password via pass(1) giving it NAME
  -h      This message

EOF
}

################################################################################
PASSWORD_STORE_DIR=${PASSWORD_STORE_DIR:-$HOME/.password-store}
PASSWORD_STORE_DIR=$(realpath "$PASSWORD_STORE_DIR")

################################################################################
option_append_ext="txt"
option_image_file=$PASSWORD_STORE_DIR.img
option_mount_dir=$PASSWORD_STORE_DIR.mnt
option_leave_mounted=0
option_size_multiplier=4

################################################################################
# shellcheck source=../lib/encryption-utils.sh
. "$(dirname "$0")/../lib/encryption-utils.sh"

################################################################################
cleanup() {
  if [ "$option_leave_mounted" -eq 0 ] &&
    mountpoint --quiet "$option_mount_dir"; then

    call_internal_script \
      mount-encrypted-dev \
      -u "$option_mount_dir"
  fi
}
trap cleanup EXIT

################################################################################
parse_command_line() {
  # Option arguments are in $OPTARG
  while getopts "e:Ef:m:Mk:p:Ph" o; do
    case "${o}" in
    e)
      option_append_ext=$OPTARG
      ;;

    E)
      option_append_ext=""
      ;;

    f)
      option_image_file=$(realpath "$OPTARG")
      ;;

    m)
      option_mount_dir=$(realpath "$OPTARG")
      ;;

    M)
      option_leave_mounted=1
      ;;

    P)
      option_size_multiplier=$OPTARG
      ;;

    k)
      option_key_file=$OPTARG
      ;;

    p)
      option_pass_name=$OPTARG
      ;;

    h)
      usage
      exit
      ;;

    *)
      exit 1
      ;;
    esac
  done

  shift $((OPTIND - 1))

  if [ $# -gt 0 ]; then
    echo >&2 "ERROR: unused command line arguments:" "$@"
    exit 1
  fi
}

################################################################################
# Calculate the size of the password store.
password_store_size() {
  local directory_size=0
  local git_repo_size=0

  directory_size=$(calc_directory_size "$PASSWORD_STORE_DIR")

  if [ -d "$PASSWORD_STORE_DIR/.git" ]; then
    git_repo_size=$(calc_directory_size "$PASSWORD_STORE_DIR/.git")
  fi

  echo "$((directory_size - git_repo_size))"
}

################################################################################
# The size to make a new disk image.
disk_image_create_size() {
  local minimum_size=$((32 * 1024 * 1024))
  local needed_size

  needed_size=$(password_store_size)
  needed_size=$((needed_size * option_size_multiplier))

  # Need 16MB for the LUKS header:
  needed_size=$((needed_size + 16 * 1024 * 1024))

  # Minimum file system size:
  if [ "$needed_size" -lt "$minimum_size" ]; then
    needed_size=$minimum_size
  fi

  # Final answer:
  echo "$needed_size"
}

################################################################################
# Create an image file if necessary, then mount it.
prepare_disk_image() {
  if [ ! -e "$option_image_file" ]; then
    local image_size
    image_size=$(disk_image_create_size)

    call_internal_script \
      make-encrypted-disk-image \
      -b "${image_size}c" \
      "$option_image_file"
  fi

  if [ ! -e "$option_mount_dir" ]; then
    mkdir -p "$option_mount_dir"
  fi

  call_internal_script \
    mount-encrypted-dev \
    "$option_image_file" \
    "$option_mount_dir"

  # How big is the password store?  This size is padded a bit to
  # accommodate for the files getting bigger as they are decrypted.
  local current_pass_size
  current_pass_size=$(password_store_size)
  current_pass_size=$(echo "$current_pass_size * 1.25" | bc)

  local current_image_size
  current_image_size=$(
    df --block-size=1 \
      --output=size \
      "$option_mount_dir" |
      tail -1
  )

  if [ "$(echo "$current_pass_size >= $current_image_size" | bc)" -eq 1 ]; then
    echo >&2 "ERROR: Disk image is not large enough to accommodate password store"
    echo >&2 "       password store is: $current_pass_size bytes"
    echo >&2 "           disk image is: $current_image_size bytes"
    echo >&2
    echo >&2 "You probably need to delete the image file and try again"
    exit 1
  fi
}

################################################################################
# Does the given file need to be synced?
file_need_syncing() {
  local src=$1
  shift

  local dst=$1
  shift

  test ! -e "$dst" ||
    test "$src" -nt "$dst"
}

################################################################################
# Sync a single source file to the given destination file.
sync_file() {
  local src_file=$1
  local dst_file=$2
  local ext=""

  if [ -n "$option_append_ext" ]; then
    ext=".$option_append_ext"
  fi

  if [ ! -L "$src_file" ]; then
    mkdir -p "$(dirname "$dst_file")"
    echo "$src_file"

    # A chance to change the name of the destination file:
    case "${src_file##*.}" in
    gpg)
      dst_file="$dst_file$ext"
      ;;
    esac

    if file_need_syncing "$src_file" "$dst_file"; then
      # Remove any existing file:
      rm -f "$dst_file"

      # The sync command depends on the source extension:
      case "${src_file##*.}" in
      gpg)
        gpg --decrypt --quiet --output "$dst_file" "$src_file"
        ;;
      *)
        cp "$src_file" "$dst_file"
        ;;
      esac
    fi
  fi
}

################################################################################
# Sync files from the password store to the mounted disk image.
sync_files_to_mount_point() {
  local src_file
  local dst_file

  while IFS= read -r -d '' src_file; do
    # Remove directory prefix and file extension from src_file:
    dst_file=$(
      awk \
        --assign "P_DIR=$PASSWORD_STORE_DIR/" \
        --assign "P_FILE=$src_file" \
        'BEGIN { print substr(P_FILE,length(P_DIR) + 1) }' |
        sed -E 's/\.gpg$//i'
    )

    # Sync the source file to the destination file:
    sync_file "$src_file" "$option_mount_dir/$dst_file"
  done < <(
    find "$PASSWORD_STORE_DIR" \
      -name .git -prune -o \
      -type f -print0
  )
}

################################################################################
main() {
  parse_command_line "$@"
  prepare_password
  prepare_disk_image
  sync_files_to_mount_point
}

################################################################################
main "$@"
