#!/usr/bin/env bash

################################################################################
set -eu
set -o pipefail

################################################################################
usage() {
  cat <<EOF
Usage: $(basename "$0") [option] <device>

Prepare <device> as an encrypted disk using LUKS

Options:

  -b       Make the new file system (legacy BIOS) bootable
  -d       Create two partitions, encrypting only the second
  -e       Directly encrypt <device> without partitioning
  -k FILE  File to read the LUKS password from
  -p NAME  Read a password via 'pass show NAME'
  -s MB    Enable -d and set first partition's size is MB
  -!       Don't prompt for dangerous operations, just do it
EOF
}

################################################################################
option_bootable=0
option_device=
option_dual_partition=0
option_force=0
option_needs_partition=1
option_partition_size=2048

################################################################################
# shellcheck source=../lib/encryption-utils.sh
. "$(dirname "$0")/../lib/encryption-utils.sh"

################################################################################
parse_command_line() {
  while getopts "bdehk:p:s:!" o; do
    case "${o}" in
    b)
      option_bootable=1
      option_needs_partition=1
      ;;

    d)
      option_dual_partition=1
      option_needs_partition=1
      ;;

    e)
      option_needs_partition=0
      ;;

    h)
      usage
      exit
      ;;

    k)
      option_key_file=$OPTARG
      ;;

    p)
      option_pass_name=$OPTARG
      ;;

    s)
      option_partition_size="$OPTARG"
      option_dual_partition=1
      option_needs_partition=1
      ;;

    '!')
      option_force=1
      ;;

    *)
      exit 1
      ;;
    esac
  done

  shift $((OPTIND - 1))

  if [ $# -ne 1 ]; then
    echo >&2 "ERROR: Please provide exactly one device"
    exit 1
  fi

  option_device=$1
}

################################################################################
confirm_destroy() {
  if [ "$option_force" -ne 1 ]; then
    printf "%s" "Really destroy all data on ${option_device}? (y/n): "
    read -r answer

    if [ "$answer" = "y" ] || [ "$answer" = "Y" ]; then
      exit
    fi
  fi
}

################################################################################
make_file_system() {
  local device=$1
  local uid
  local gid

  uid=$(id --user)
  gid=$(id --group)

  do_cmd \
    mkfs.ext4 \
    -E lazy_itable_init=0,lazy_journal_init=0,root_owner="$uid:$gid" \
    "$device"

  do_cmd sync
}

################################################################################
do_partition() {
  local partition_label=gpt

  if [ ! -b "$option_device" ]; then
    echo >&2 "ERROR: $option_device is not a block device"
    exit 1
  fi

  confirm_destroy

  if [ "$option_bootable" -eq 1 ]; then
    partition_label=msdos
  fi

  if [ "$option_dual_partition" -eq 0 ]; then
    sudo_ parted -s "$option_device" -- \
      mklabel "$partition_label" \
      mkpart primary ext4 0% 100%
    do_encrypt "${option_device}1"
  else
    sudo_ parted -s "$option_device" -- \
      mklabel "$partition_label" \
      mkpart primary ext4 0% "$option_partition_size"MB \
      mkpart primary ext4 $((option_partition_size + 1))MB 100%
    make_file_system "${option_device}1"
    do_encrypt "${option_device}2"
  fi
}

################################################################################
do_encrypt() {
  local device=$1
  local crypt_device
  local loopback

  crypt_device=$(make_crypt_device_name "$device")

  loopback=$(sudo_ losetup -f)
  sudo_ losetup "$loopback" "$device"

  echo >&2 "==> Setting up LUKS device: $loopback"
  cryptsetup_ luksFormat "$loopback"
  cryptsetup_ open "$loopback" "$crypt_device"
  sudo_ chown "$USER" "/dev/mapper/$crypt_device"

  echo >&2 "==> Formatting disk image"
  make_file_system "/dev/mapper/$crypt_device"

  echo >&2 "==> Cleaning up..."
  sudo_ cryptsetup close "$crypt_device"
  sudo_ losetup -d "$loopback"
}

################################################################################
main() {
  parse_command_line "$@"
  prepare_password

  if [ "$option_needs_partition" -eq 1 ]; then
    do_partition
  else
    do_encrypt "$option_device"
  fi
}

################################################################################
main "$@"
