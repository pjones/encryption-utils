#!/bin/sh -eu

################################################################################
usage () {
cat <<EOF
Usage: $(basename "$0") [option] <device>

Prepare <device> as an encrypted disk using LUKS

Options:

  -b     Make the new file system bootable on a BIOS
  -c DIR Clone directory DIR as an encrypted image file
  -d     Create two partitions, encrypting the second
  -e     Directly encrypt <device> without partitioning
  -f     Specify that <device> is really an image file

  -s MB  When using -d, first partition size is MB
         When using -c, add MB padding to the image file
         When using -f, set the size of the image file
EOF
}

################################################################################
do_cmd () {
  echo "$@"
  "$@"
}

################################################################################
bios=NO
dual=NO
size=2048
imgfile=NO
partition=YES
clone=""

while getopts "bc:efdhs:" o; do
  case "${o}" in
    b) bios=YES
       ;;

    c) clone="$OPTARG"
       imgfile=YES

       if [ ! -d "$clone" ]; then
         echo "directory to clone doesn't exist: $clone"
         exit 1
       fi
       ;;

    d) dual=YES
       ;;

    e) partition=NO
       ;;

    f) imgfile=YES
       ;;

    h) usage
       exit
       ;;

    s) size="$OPTARG"
       ;;

    *) echo "ERROR: bad option $o"
       exit 1
       ;;
  esac
done

shift $((OPTIND-1))

################################################################################
if [ "$(id -u)" != 0 ]; then
  echo "ERROR: this operation requires you to be root."
  exit 1
fi

if [ $# -ne 1 ]; then
  usage
  exit 1
fi

if [ "$imgfile" = "NO" ] && [ ! -b "$1" ]; then
  echo "ERROR: $1 is not a block device"
  exit 1
fi

if [ "$imgfile" = "YES" ] && [ -r "$1" ]; then
  echo "ERROR: $1 already exists"
  exit 1
fi

################################################################################
device=$1

################################################################################
do_partition() {
  printf "%s" "Really destroy all data on $device? (y/n): "
  read -r answer
  [ "$answer" = "y" ] || [ "$answer" = "Y" ] || exit

  if [ "$dual" = "NO" ] && [ "$partition" = "YES" ]; then
    full_device="${device}1"
  elif [ "$partition" = "NO" ]; then
    full_device="$device"
  else
    full_device="${device}2"
  fi

  if [ "$partition" = "YES" ]; then
    echo "==> creating partition table"
    label=gpt
    [ "$bios" = "YES" ] && label=msdos

    if [ "$dual" = "NO" ]; then
      do_cmd parted -s "$device" -- \
             mklabel "$label" \
             mkpart primary ext4 0% 100%
    else
      do_cmd parted -s "$device" -- \
             mklabel "$label" \
             mkpart primary ext4 0% "$size"MB \
             mkpart primary ext4 $(("$size" + 1))MB 100%
    fi
  fi

  do_encrypt "$full_device"
}

################################################################################
do_make_image_file() {
  # Work with bytes since we are limited to integer arithmetic when
  # using the shell's ((expr)) syntax.
  if [ -n "$clone" ]; then
    padding=$(("$size" * 1024 * 1024))
    origin_size=$(du --count-links --bytes --dereference-args "$clone" | cut -f 1)
    bytes=$(("$origin_size" + "$padding"))
  else
    bytes=$(("$size" * 1024 * 1024))
  fi

  loopback=$(losetup -f)
  do_cmd dd if=/dev/zero of="$device" ibs=1M obs=1M bs=1c count="$bytes"
  do_cmd losetup "$loopback" "$device"
  do_encrypt "$loopback"
  do_cmd losetup -d "$loopback"
}

################################################################################
do_encrypt() {
  encdevice=$1
  map="$(basename "$encdevice")_crypt"

  echo "==> setting up encryption formatting, enter disk password"
  do_cmd cryptsetup -c aes -s 256 -h sha256 --batch-mode -y \
         luksFormat "$encdevice"

  echo "==> mapping encrypted encdevice, enter disk password"
  do_cmd cryptsetup luksOpen "$encdevice" "$map"

  echo "==> creating file system on encrypted encdevice"
  [ "$dual" = "YES" ] && [ "$imgfile" = "NO" ] && do_cmd mkfs.ext4 "${device}1"
  do_cmd mkfs.ext4 -E lazy_itable_init=0,lazy_journal_init=0 "/dev/mapper/$map"
  do_cmd sleep 5 # Let the disk catch up.

  if [ -n "$clone" ]; then
    echo "==> cloning $clone"
    point=$(mktemp --directory)
    do_cmd mount "/dev/mapper/$map" "$point"
    echo "tar ... | tar ..."
    tar -C "$clone" --hard-dereference -cf - . | tar -C "$point" -xvf -
    do_cmd umount "$point"
    do_cmd rmdir "$point"
  fi

  echo "==> unmapping encrypted encdevice"
  do_cmd cryptsetup luksClose "$map"
}

################################################################################
if [ "$imgfile" = "NO" ]; then
  do_partition
elif [ "$imgfile" = "YES" ]; then
  do_make_image_file
else
  echo "Well, this is embarrassing, this should never happen."
  exit 1
fi

################################################################################
echo "==> done."
