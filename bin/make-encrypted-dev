#!/bin/sh -eu

################################################################################
usage () {
  echo "Usage: "`basename $0`:" <device>"
  echo "Prepare <device> as an encrypted disk using LUKS"
  echo
  echo "Options:"
  echo
  echo "  -b     Make the new file system bootable on a BIOS"
  echo "  -d     Create two partitions, encrypting the second"
  echo "  -s MB  When using -d, first partition size is MB"
  echo
  exit 1
}

################################################################################
do_cmd () {
  echo "$@"
  "$@"
}

################################################################################
bios=NO
dual=NO
size=2048

while getopts "bdhs:" o; do
  case "${o}" in
    b) bios=YES
       ;;

    d) dual=YES
       ;;

    h) usage
       exit
       ;;

    s) size=$OPTARG
       ;;

    *) echo "ERROR: bad option $o"
       exit 1
       ;;
  esac
done

shift $((OPTIND-1))

################################################################################
if [ `id -u` != 0 ]; then
  echo "ERROR: this operation requires you to be root."
  exit 1
fi

if [ $# -ne 1 -o ! -b "$1" ]; then
  usage
  exit 1
fi

################################################################################
device=$1

if [ $dual = "NO" ]; then
  partition=${device}1
else
  partition=${device}2
fi

map=`basename $partition`_crypt

read -p "Really destroy all data on $device? (y/n): " answer
[ "$answer" = "y" -o "$answer" = "Y" ] || exit

################################################################################
echo "==> creating partition table"
label=gpt
[ $bios = "YES" ] && label=msdos

if [ $dual = "NO" ]; then
  do_cmd parted -s $device -- \
         mklabel $label \
         mkpart primary ext4 1 -1
else
  do_cmd parted -s $device -- \
         mklabel $label \
         mkpart primary ext4 1 $size \
         mkpart primary ext4 `expr $size + 1` -1
fi

echo "==> setting up encryption formatting, enter disk password"
do_cmd cryptsetup -c aes -s 256 -h sha256 --batch-mode -y \
           luksFormat $partition

echo "==> mapping encrypted partition, enter disk password"
do_cmd cryptsetup luksOpen $partition $map

echo "==> creating file system on encrypted partition"
[ $dual = "YES" ] && do_cmd mkfs.ext4 ${device}1
do_cmd mkfs.ext4 /dev/mapper/$map
do_cmd sleep 5 # Let the disk catch up.

echo "==> unmapping encrypted partition"
do_cmd cryptsetup luksClose $map

echo "==> done."
